{"version":3,"file":"static/js/744.2263f59e.chunk.js","mappings":"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","sources":["redux/phonebook/selectorsPhonebook.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/UserForm/UserForm.module.css?24f4","components/UserForm/UserForm.jsx","webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","components/Contacts/MarkupContacts.jsx","components/Contacts/Contacts.jsx","webpack://react-homework-template/./src/pages/Contacts/ContactsPage.module.css?3d45","pages/Contacts/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = store => store.storeContacts.stateContacts;\nexport const selectIsLoading = store => store.storeContacts.isLoading;\nexport const selectError = store => store.storeContacts.error;\nexport const selectFilter = store => store.storeFilter.stateFilter; // Contacts.jsx, Filter.jsx\n\n// ! RTK Query:\n// export const selectFilter = store => store.storeFilter.stateFilter; // Contacts.jsx, Filter.jsx\n","// extracted by mini-css-extract-plugin\nexport default {\"inputWrapper\":\"Filter_inputWrapper__-FNL8\"};","import css from './Filter.module.css';\n\n// ^ Рефакторінг у Redux\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterInStateContacts } from 'redux/phonebook/sliceFilter';\nimport { selectFilter } from 'redux/phonebook/selectorsPhonebook';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  // Отримання даних з поля input\n  const getInput = ({ target: { value } }) => {\n    dispatch(filterInStateContacts({ value }));\n  };\n\n  return (\n    <div className={css.inputWrapper}>\n      <label htmlFor=\"searchInput\">Search contacts by name here</label>\n\n      <input\n        className=\"form-control me-2\"\n        // type=\"text\"\n        type=\"search\"\n        placeholder=\"Search\"\n        aria-label=\"Search\"\n        id=\"searchInput\"\n        name=\"filter\"\n        onChange={getInput}\n        value={filter}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"userFormWrapper\":\"UserForm_userFormWrapper__SspYJ\",\"inputWrapper\":\"UserForm_inputWrapper__DeOXH\",\"formLabel\":\"UserForm_formLabel__kIkQX\",\"submitBtn\":\"UserForm_submitBtn__jiWiq\"};","import css from './UserForm.module.css';\nimport { useState } from 'react';\n\n// ^ Рефакторінг у Redux\n// Для звертання до стору Redux - useSelector, для запуску необхідної дії (необхідного редюсера) - useDispatch\nimport { useDispatch, useSelector } from 'react-redux';\n// import { addInStateContact } from '../../store/SlicePhoneBook';\n// import { nanoid } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/phonebook/selectorsPhonebook';\nimport { addContact } from 'redux/phonebook/fetchContacts';\n\nexport const UserForm = () => {\n  // dispatch - це як тригер, що відбулась подія. Але нам треба вказати яка саме\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  // Локальні стейти немає сенсу переносити у глобальний Redux:\n  const [userName, setUserName] = useState('');\n  const [userNumber, setUserNumber] = useState('');\n\n  // Записую дані полів інпут у відповідні стейти\n  const getInput = ({ target: { name, value } }) => {\n    if (name === 'name') {\n      setUserName(value);\n    } else {\n      setUserNumber(value);\n    }\n  };\n\n  // Спроба записати новий контакт\n  const setContact = e => {\n    e.preventDefault();\n\n    // Перевірка чи є вже такий контакт:\n    const isExist = contacts.find(contact => contact.name === userName);\n\n    if (isExist) {\n      // alert працює як return\n      alert(`${userName} is already in contacts`);\n    } else {\n      // спроба створити об'єкт:\n      const isCreated = dispatch(\n        addContact({ name: userName, number: userNumber })\n      );\n\n      // Якщо новий об'єкт створений успішно, то обнуляємо поля інпутів у формі\n      if (isCreated) {\n        setUserName('');\n        setUserNumber('');\n      }\n    }\n  };\n\n  // Повертаю розмітку:\n  return (\n    <form className={css.addUserForm} onSubmit={setContact}>\n      <div className={css.userFormWrapper}>\n        <div className={css.inputWrapper}>\n          <label className={css.formLabel} htmlFor=\"UserId\">\n            Name\n          </label>\n\n          <input\n            className=\"form-control me-2\"\n            // type=\"search\"\n            placeholder=\"Input name here\"\n            aria-label=\"Search\"\n            // className={css.formInput}\n            id=\"UserId\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={getInput}\n            value={userName}\n          />\n        </div>\n\n        <div className={css.inputWrapper}>\n          <label className={css.formLabel} htmlFor=\"number\">\n            Phone Number\n          </label>\n          <input\n            className=\"form-control me-2\"\n            // type=\"search\"\n            placeholder=\"Input phone number here\"\n            aria-label=\"Search\"\n            // className={css.formInput}\n            id=\"number\"\n            onChange={getInput}\n            value={userNumber}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </div>\n\n        <button className=\"btn btn-outline-primary\" type=\"submit\">\n          Add contact\n        </button>\n      </div>\n    </form>\n  );\n};\n\n// ! RTK Query:\n// import css from './UserForm.module.css';\n// import { useState } from 'react';\n\n// // ^ Рефакторінг у RTK Query\n// import {\n//   useAddContactMutation,\n//   useGetContactsQuery,\n// } from 'store/contactsRTKQueryApi';\n\n// export const UserForm = () => {\n//   // Локальні стейти немає сенсу переносити у глобальний Redux:\n//   const [userName, setUserName] = useState('');\n//   const [userNumber, setUserNumber] = useState('');\n\n//   // * При використанні RTK Query:\n//   // const data = useGetContactsQuery();\n//   // console.log('UserForm >> data:', data);\n//   const { data: contacts } = useGetContactsQuery();\n//   const [addContact] = useAddContactMutation();\n\n//   // Записую дані полів інпут у відповідні стейти\n//   const getInput = ({ target: { name, value } }) => {\n//     if (name === 'name') {\n//       setUserName(value);\n//     } else {\n//       setUserNumber(value);\n//     }\n//   };\n\n//   // Спроба записати новий контакт\n//   const setNewContact = async e => {\n//     e.preventDefault();\n\n//     // Перевірка чи є вже такий контакт:\n//     const isExist = contacts.find(contact => contact.name === userName);\n\n//     if (isExist) {\n//       // alert працює як return\n//       alert(`${userName} is already in contacts`);\n//     } else {\n//       // спроба створити об'єкт:\n//       const isCreated = await addContact({\n//         name: userName,\n//         number: userNumber,\n//       });\n//       console.log('setContact >> isCreated.data:', isCreated.data);\n\n//       // Якщо новий об'єкт створений успішно, то обнуляємо поля інпутів у формі\n//       if (isCreated) {\n//         setUserName('');\n//         setUserNumber('');\n//       }\n//     }\n//   };\n\n//   // Повертаю розмітку:\n//   return (\n//     <form className={css.addUserForm} onSubmit={setNewContact}>\n//       <div className={css.userFormWrapper}>\n//         <div className={css.inputWrapper}>\n//           <label className={css.formLabel} htmlFor=\"UserId\">\n//             Name\n//           </label>\n//           <input\n//             className={css.formInput}\n//             id=\"UserId\"\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//             onChange={getInput}\n//             value={userName}\n//           />\n//         </div>\n\n//         <div className={css.inputWrapper}>\n//           <label className={css.formLabel} htmlFor=\"number\">\n//             Phone Number\n//           </label>\n//           <input\n//             className={css.formInput}\n//             id=\"number\"\n//             onChange={getInput}\n//             value={userNumber}\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//         </div>\n\n//         <button className={css.submitBtn} type=\"submit\">\n//           Add contact\n//         </button>\n//       </div>\n//     </form>\n//   );\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Contacts_list__R3QeP\",\"listItem\":\"Contacts_listItem__ipWRN\",\"deleteBtn\":\"Contacts_deleteBtn__By0w4\"};","import PropTypes from 'prop-types';\nimport css from './Contacts.module.css';\n\n// ^ Рефакторінг у Redux\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/phonebook/fetchContacts';\n\nexport function MarkupContacts({ name, number, id }) {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <li className={css.listItem}>\n      {name}: {number}\n      <button className=\"btn btn-outline-primary\" onClick={handleDeleteContact}>\n        Delete\n      </button>\n    </li>\n  );\n}\n\nMarkupContacts.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\n// ! RTK Query:\n// import PropTypes from 'prop-types';\n// import css from './Contacts.module.css';\n\n// // ^ Рефакторінг у RTK Query\n// import { useDeleteContactMutation } from 'store/contactsRTKQueryApi';\n\n// export function MarkupContacts({ name, number, id }) {\n//   // * При використанні RTK Query:\n//   // & Хуки Query повертають об'єкт\n//   // const data = useGetContactsQuery();\n//   // console.log('UserForm >> data:', data);\n//   // const { isLoading, data: contacts, isError } = useGetContactsQuery();\n\n//   // & Хуки Mutation повертають масив\n//   const [deleteContact, delInfo] = useDeleteContactMutation();\n//   // console.log('MarkupContacts >> delInfo:', delInfo);\n//   // delInfo - це об'єкт\n\n//   const handleDeleteContact = async () => {\n//     const del = await deleteContact(id);\n//     console.log('handleDeleteContact >> del.data:', del.data);\n//     return del;\n//   };\n\n//   return (\n//     <li className={css.listItem}>\n//       {name}: {number}\n//       <button className={css.deleteBtn} onClick={handleDeleteContact}>\n//         {delInfo.isLoading ? <b>Deleting...</b> : 'Delete'}\n//       </button>\n//     </li>\n//   );\n// }\n\n// MarkupContacts.propTypes = {\n//   name: PropTypes.string.isRequired,\n//   number: PropTypes.string.isRequired,\n//   id: PropTypes.string.isRequired,\n// };\n","import css from './Contacts.module.css';\n\n// ^ Рефакторінг у Redux\nimport { useDispatch, useSelector } from 'react-redux';\nimport { MarkupContacts } from './MarkupContacts';\nimport {\n  selectContacts,\n  selectFilter,\n} from 'redux/phonebook/selectorsPhonebook';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/phonebook/fetchContacts';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  // Виклик \"операції\":\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // Забираю лист контактів зі store Redux:\n  // useSelector приймає функцію, яка приймає увесь store з Redux\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  // Фільтрація контактів:\n  const filteredContacts = filter\n    ? contacts.filter(({ name }) =>\n        name.toLowerCase().includes(filter.toLowerCase())\n      )\n    : contacts;\n\n  // Рендер відфільтрованих контактів:\n  return (\n    filteredContacts.length > 0 && (\n      <ul className={css.list}>\n        {filteredContacts.map(({ name, number, id }) => {\n          return (\n            <MarkupContacts\n              key={id}\n              name={name}\n              number={number}\n              id={id}\n            ></MarkupContacts>\n          );\n        })}\n      </ul>\n    )\n  );\n};\n\n// ! RTK Query:\n// import css from './Contacts.module.css';\n\n// // ^ Рефакторінг у Redux\n// import { useSelector } from 'react-redux';\n// import { MarkupContacts } from './MarkupContacts';\n// import { selectFilter } from 'store/selectors';\n\n// // ^ Рефакторінг у RTK Query\n// import { useGetContactsQuery } from 'store/contactsRTKQueryApi';\n\n// export const Contacts = () => {\n//   // * При використанні RTK Query:\n//   // const data = useGetContactsQuery();\n//   // console.log('UserForm >> data:', data);\n//   const { data: contacts } = useGetContactsQuery();\n\n//   // Забираю лист контактів зі store Redux:\n//   // useSelector приймає функцію, яка приймає увесь store з Redux\n//   const filter = useSelector(selectFilter);\n\n//   // Фільтрація контактів:\n//   const filteredContacts = filter\n//     ? contacts.filter(({ name }) =>\n//         name.toLowerCase().includes(filter.toLowerCase())\n//       )\n//     : contacts;\n\n//   // Рендер відфільтрованих контактів:\n//   return (\n//     filteredContacts?.length > 0 && (\n//       <ul className={css.list}>\n//         {filteredContacts.map(({ name, number: number, id }) => {\n//           return (\n//             <MarkupContacts\n//               key={id}\n//               name={name}\n//               number={number}\n//               id={id}\n//             ></MarkupContacts>\n//           );\n//         })}\n//       </ul>\n//     )\n//   );\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsContainer\":\"ContactsPage_contactsContainer__YHfjd\",\"contactsPreloader\":\"ContactsPage_contactsPreloader__jeIkJ\",\"contactsItem\":\"ContactsPage_contactsItem__JfvmF\"};","import { PreLoader } from 'components/Preloader/PreLoader';\nimport { useSelector } from 'react-redux';\nimport {\n  selectError,\n  selectIsLoading,\n} from 'redux/phonebook/selectorsPhonebook';\n\nimport { Filter } from 'components/Filter/Filter';\nimport { UserForm } from 'components/UserForm/UserForm';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport css from './ContactsPage.module.css';\n\nconst ContactsPage = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <>\n      <div className={css.contactsContainer}>\n        <div className={css.contactsItem}>\n          <h2>Phonebook</h2>\n          <UserForm />\n        </div>\n        <div className={css.contactsItem}>\n          <h2>Contacts</h2>\n          <Filter />\n        </div>\n        <div className={css.contactsItem}>\n          <div className={css.contactsPreloader}>\n            <p className={css.contactsPreloader}>List of contacts</p>\n            <div>{isLoading && !error && <PreLoader />}</div>\n          </div>\n          <Contacts />\n          {error && <h2>Error: {error}</h2>}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","store","storeContacts","stateContacts","selectIsLoading","isLoading","selectError","error","selectFilter","storeFilter","stateFilter","Filter","dispatch","useDispatch","filter","useSelector","className","css","htmlFor","type","placeholder","id","name","onChange","value","target","filterInStateContacts","UserForm","contacts","useState","userName","setUserName","userNumber","setUserNumber","getInput","onSubmit","e","preventDefault","find","contact","alert","addContact","number","pattern","title","required","MarkupContacts","onClick","deleteContact","Contacts","useEffect","fetchContacts","filteredContacts","toLowerCase","includes","length","map","PreLoader"],"sourceRoot":""}