{"version":3,"file":"static/js/744.8b091351.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/Contacts/ContactsPage.module.css?3d45","redux/phonebook/selectorsPhonebook.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/UserForm/UserForm.module.css?24f4","components/UserForm/UserForm.jsx","webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","components/Contacts/MarkupContacts.jsx","components/Contacts/Contacts.jsx","pages/Contacts/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactsContainer\":\"ContactsPage_contactsContainer__YHfjd\",\"contactsItem\":\"ContactsPage_contactsItem__JfvmF\",\"contactsPreloader\":\"ContactsPage_contactsPreloader__jeIkJ\",\"preloader\":\"ContactsPage_preloader__zdzqa\"};","export const selectContacts = store => store.storeContacts.stateContacts;\nexport const selectIsLoading = store => store.storeContacts.isLoading;\nexport const selectError = store => store.storeContacts.error;\nexport const selectFilter = store => store.storeFilter.stateFilter; // Contacts.jsx, Filter.jsx\n\n// ! RTK Query:\n// export const selectFilter = store => store.storeFilter.stateFilter; // Contacts.jsx, Filter.jsx\n","// extracted by mini-css-extract-plugin\nexport default {\"inputWrapper\":\"Filter_inputWrapper__-FNL8\"};","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterInStateContacts } from 'redux/phonebook/sliceFilter';\nimport { selectFilter } from 'redux/phonebook/selectorsPhonebook';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  // Отримання даних з поля input\n  const getInput = ({ target: { value } }) => {\n    dispatch(filterInStateContacts({ value }));\n  };\n\n  return (\n    <div className={css.inputWrapper}>\n      <label htmlFor=\"searchInput\">Search contacts by name here</label>\n\n      <input\n        className=\"form-control me-2\"\n        type=\"search\"\n        placeholder=\"Search\"\n        aria-label=\"Search\"\n        id=\"searchInput\"\n        name=\"filter\"\n        onChange={getInput}\n        value={filter}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"userFormWrapper\":\"UserForm_userFormWrapper__SspYJ\",\"inputWrapper\":\"UserForm_inputWrapper__DeOXH\",\"formLabel\":\"UserForm_formLabel__kIkQX\",\"submitBtn\":\"UserForm_submitBtn__jiWiq\"};","import css from './UserForm.module.css';\nimport Notiflix from 'notiflix';\nimport { useState } from 'react';\n\n// ^ Рефакторінг у Redux\n// Для звертання до стору Redux - useSelector, для запуску необхідної дії (необхідного редюсера) - useDispatch\nimport { useDispatch, useSelector } from 'react-redux';\n// import { addInStateContact } from '../../store/SlicePhoneBook';\n// import { nanoid } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/phonebook/selectorsPhonebook';\nimport { addContact } from 'redux/phonebook/fetchContacts';\n\nexport const UserForm = () => {\n  // dispatch - це як тригер, що відбулась подія. Але нам треба вказати яка саме\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  // Локальні стейти немає сенсу переносити у глобальний Redux:\n  const [userName, setUserName] = useState('');\n  const [userNumber, setUserNumber] = useState('');\n\n  // Записую дані полів інпут у відповідні стейти\n  const getInput = ({ target: { name, value } }) => {\n    if (name === 'name') {\n      setUserName(value);\n    } else {\n      setUserNumber(value);\n    }\n  };\n\n  // Спроба записати новий контакт\n  const setContact = e => {\n    e.preventDefault();\n\n    // Перевірка чи є вже такий контакт:\n    const isExist = contacts.find(contact => contact.name === userName);\n\n    if (isExist) {\n      // alert працює як return\n      // alert(`${userName} is already in contacts`);\n      Notiflix.Notify.warning(`User \"${userName}\" is already in contacts`);\n      return;\n    } else {\n      // спроба створити об'єкт:\n      const isCreated = dispatch(\n        addContact({ name: userName, number: userNumber })\n      );\n\n      // Якщо новий об'єкт створений успішно, то обнуляємо поля інпутів у формі\n      if (isCreated) {\n        Notiflix.Notify.success(`Contact \"${userName}\" added successfully!`);\n        setUserName('');\n        setUserNumber('');\n      }\n    }\n  };\n\n  // Повертаю розмітку:\n  return (\n    <form className={css.userFormWrapper} onSubmit={setContact}>\n      <div className={css.inputWrapper}>\n        <label className={css.formLabel} htmlFor=\"UserName\">\n          Name\n        </label>\n\n        <input\n          className=\"form-control me-2\"\n          // type=\"search\"\n          placeholder=\"Enter contact name here\"\n          aria-label=\"User Name\"\n          // className={css.formInput}\n          id=\"UserId\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={getInput}\n          value={userName}\n        />\n      </div>\n\n      <div className={css.inputWrapper}>\n        <label className={css.formLabel} htmlFor=\"UserNumber\">\n          Phone Number\n        </label>\n        <input\n          className=\"form-control me-2\"\n          // type=\"search\"\n          placeholder=\"Enter contact phone number here\"\n          aria-label=\"Phone number\"\n          // className={css.formInput}\n          id=\"number\"\n          onChange={getInput}\n          value={userNumber}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </div>\n\n      <button className=\"btn btn-outline-primary\" type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\n// ! RTK Query:\n// import css from './UserForm.module.css';\n// import { useState } from 'react';\n\n// // ^ Рефакторінг у RTK Query\n// import {\n//   useAddContactMutation,\n//   useGetContactsQuery,\n// } from 'store/contactsRTKQueryApi';\n\n// export const UserForm = () => {\n//   // Локальні стейти немає сенсу переносити у глобальний Redux:\n//   const [userName, setUserName] = useState('');\n//   const [userNumber, setUserNumber] = useState('');\n\n//   // * При використанні RTK Query:\n//   // const data = useGetContactsQuery();\n//   // console.log('UserForm >> data:', data);\n//   const { data: contacts } = useGetContactsQuery();\n//   const [addContact] = useAddContactMutation();\n\n//   // Записую дані полів інпут у відповідні стейти\n//   const getInput = ({ target: { name, value } }) => {\n//     if (name === 'name') {\n//       setUserName(value);\n//     } else {\n//       setUserNumber(value);\n//     }\n//   };\n\n//   // Спроба записати новий контакт\n//   const setNewContact = async e => {\n//     e.preventDefault();\n\n//     // Перевірка чи є вже такий контакт:\n//     const isExist = contacts.find(contact => contact.name === userName);\n\n//     if (isExist) {\n//       // alert працює як return\n//       alert(`${userName} is already in contacts`);\n//     } else {\n//       // спроба створити об'єкт:\n//       const isCreated = await addContact({\n//         name: userName,\n//         number: userNumber,\n//       });\n//       console.log('setContact >> isCreated.data:', isCreated.data);\n\n//       // Якщо новий об'єкт створений успішно, то обнуляємо поля інпутів у формі\n//       if (isCreated) {\n//         setUserName('');\n//         setUserNumber('');\n//       }\n//     }\n//   };\n\n//   // Повертаю розмітку:\n//   return (\n//     <form className={css.addUserForm} onSubmit={setNewContact}>\n//       <div className={css.userFormWrapper}>\n//         <div className={css.inputWrapper}>\n//           <label className={css.formLabel} htmlFor=\"UserId\">\n//             Name\n//           </label>\n//           <input\n//             className={css.formInput}\n//             id=\"UserId\"\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//             onChange={getInput}\n//             value={userName}\n//           />\n//         </div>\n\n//         <div className={css.inputWrapper}>\n//           <label className={css.formLabel} htmlFor=\"number\">\n//             Phone Number\n//           </label>\n//           <input\n//             className={css.formInput}\n//             id=\"number\"\n//             onChange={getInput}\n//             value={userNumber}\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//         </div>\n\n//         <button className={css.submitBtn} type=\"submit\">\n//           Add contact\n//         </button>\n//       </div>\n//     </form>\n//   );\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Contacts_list__R3QeP\",\"listItem\":\"Contacts_listItem__ipWRN\"};","import Notiflix from 'notiflix';\nimport PropTypes from 'prop-types';\nimport css from './Contacts.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/phonebook/fetchContacts';\n\nexport function MarkupContacts({ name, number, id }) {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = () => {\n    dispatch(deleteContact(id))\n      .unwrap()\n      .then(promise => {\n        Notiflix.Notify.success(`Contact \"${promise.name}\" has been deleted`);\n      })\n      .catch(error => {\n        Notiflix.Notify.failure(`Some error: \"${error}\"`);\n      });\n  };\n\n  return (\n    <li className={css.listItem}>\n      {name}: {number}\n      <button className=\"btn btn-outline-primary\" onClick={handleDeleteContact}>\n        Delete\n      </button>\n    </li>\n  );\n}\n\nMarkupContacts.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\n// ! RTK Query:\n// import PropTypes from 'prop-types';\n// import css from './Contacts.module.css';\n\n// // ^ Рефакторінг у RTK Query\n// import { useDeleteContactMutation } from 'store/contactsRTKQueryApi';\n\n// export function MarkupContacts({ name, number, id }) {\n//   // * При використанні RTK Query:\n//   // & Хуки Query повертають об'єкт\n//   // const data = useGetContactsQuery();\n//   // console.log('UserForm >> data:', data);\n//   // const { isLoading, data: contacts, isError } = useGetContactsQuery();\n\n//   // & Хуки Mutation повертають масив\n//   const [deleteContact, delInfo] = useDeleteContactMutation();\n//   // console.log('MarkupContacts >> delInfo:', delInfo);\n//   // delInfo - це об'єкт\n\n//   const handleDeleteContact = async () => {\n//     const del = await deleteContact(id);\n//     console.log('handleDeleteContact >> del.data:', del.data);\n//     return del;\n//   };\n\n//   return (\n//     <li className={css.listItem}>\n//       {name}: {number}\n//       <button className={css.deleteBtn} onClick={handleDeleteContact}>\n//         {delInfo.isLoading ? <b>Deleting...</b> : 'Delete'}\n//       </button>\n//     </li>\n//   );\n// }\n\n// MarkupContacts.propTypes = {\n//   name: PropTypes.string.isRequired,\n//   number: PropTypes.string.isRequired,\n//   id: PropTypes.string.isRequired,\n// };\n","import css from './Contacts.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { MarkupContacts } from './MarkupContacts';\nimport {\n  selectContacts,\n  selectFilter,\n} from 'redux/phonebook/selectorsPhonebook';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/phonebook/fetchContacts';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  // Виклик \"операції\":\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // Забираю лист контактів зі store Redux:\n  // useSelector приймає функцію, яка приймає увесь store з Redux\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  // Фільтрація контактів:\n  const filteredContacts = filter\n    ? contacts.filter(({ name }) =>\n        name.toLowerCase().includes(filter.toLowerCase())\n      )\n    : contacts;\n\n  // Рендер відфільтрованих контактів:\n  return (\n    filteredContacts.length > 0 && (\n      <ul className={css.list}>\n        {filteredContacts.map(({ name, number, id }) => {\n          return (\n            <MarkupContacts\n              key={id}\n              name={name}\n              number={number}\n              id={id}\n            ></MarkupContacts>\n          );\n        })}\n      </ul>\n    )\n  );\n};\n\n// ! RTK Query:\n// import css from './Contacts.module.css';\n\n// // ^ Рефакторінг у Redux\n// import { useSelector } from 'react-redux';\n// import { MarkupContacts } from './MarkupContacts';\n// import { selectFilter } from 'store/selectors';\n\n// // ^ Рефакторінг у RTK Query\n// import { useGetContactsQuery } from 'store/contactsRTKQueryApi';\n\n// export const Contacts = () => {\n//   // * При використанні RTK Query:\n//   // const data = useGetContactsQuery();\n//   // console.log('UserForm >> data:', data);\n//   const { data: contacts } = useGetContactsQuery();\n\n//   // Забираю лист контактів зі store Redux:\n//   // useSelector приймає функцію, яка приймає увесь store з Redux\n//   const filter = useSelector(selectFilter);\n\n//   // Фільтрація контактів:\n//   const filteredContacts = filter\n//     ? contacts.filter(({ name }) =>\n//         name.toLowerCase().includes(filter.toLowerCase())\n//       )\n//     : contacts;\n\n//   // Рендер відфільтрованих контактів:\n//   return (\n//     filteredContacts?.length > 0 && (\n//       <ul className={css.list}>\n//         {filteredContacts.map(({ name, number: number, id }) => {\n//           return (\n//             <MarkupContacts\n//               key={id}\n//               name={name}\n//               number={number}\n//               id={id}\n//             ></MarkupContacts>\n//           );\n//         })}\n//       </ul>\n//     )\n//   );\n// };\n","import css from './ContactsPage.module.css';\nimport { SmallPreLoader } from 'components/Preloader/PreLoader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/phonebook/selectorsPhonebook';\n\nimport { Filter } from 'components/Filter/Filter';\nimport { UserForm } from 'components/UserForm/UserForm';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/phonebook/fetchContacts';\n\nconst ContactsPage = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contactsList = useSelector(selectContacts);\n  console.log('ContactsPage >> contactsList:', contactsList);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div className={css.contactsContainer}>\n        <div className={css.contactsItem}>\n          <h2>Phonebook</h2>\n          <UserForm />\n        </div>\n        {contactsList.length > 0 && (\n          <div>\n            <div className={css.contactsItem}>\n              <h2>Contacts</h2>\n              <Filter />\n            </div>\n            <div className={css.contactsItem}>\n              <div className={css.contactsPreloader}>\n                <p>List of contacts</p>\n                <div className={css.preloader}>\n                  {isLoading && !error && (\n                    <>\n                      <SmallPreLoader /> <SmallPreLoader /> <SmallPreLoader />\n                    </>\n                  )}\n                </div>\n              </div>\n              <Contacts />\n              {error && <h2>Error: {error}</h2>}\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","store","storeContacts","stateContacts","selectIsLoading","isLoading","selectError","error","selectFilter","storeFilter","stateFilter","Filter","dispatch","useDispatch","filter","useSelector","className","css","htmlFor","type","placeholder","id","name","onChange","value","target","filterInStateContacts","UserForm","contacts","useState","userName","setUserName","userNumber","setUserNumber","getInput","onSubmit","e","preventDefault","find","contact","Notiflix","addContact","number","pattern","title","required","MarkupContacts","onClick","deleteContact","unwrap","then","promise","catch","Contacts","useEffect","fetchContacts","filteredContacts","toLowerCase","includes","length","map","contactsList","console","log"],"sourceRoot":""}